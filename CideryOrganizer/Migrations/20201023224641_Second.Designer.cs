// <auto-generated />
using System;
using CideryOrganizer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CideryOrganizer.Migrations
{
    [DbContext(typeof(CideryOrganizerContext))]
    [Migration("20201023224641_Second")]
    partial class Second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CideryOrganizer.Models.Apple", b =>
                {
                    b.Property<int>("AppleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppleName");

                    b.Property<string>("UserId");

                    b.HasKey("AppleId");

                    b.HasIndex("UserId");

                    b.ToTable("Apples");
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleCider", b =>
                {
                    b.Property<int>("AppleCiderId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppleId");

                    b.Property<int>("CiderId");

                    b.HasKey("AppleCiderId");

                    b.HasIndex("AppleId");

                    b.HasIndex("CiderId");

                    b.ToTable("AppleCider");
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleMaker", b =>
                {
                    b.Property<int>("AppleMakerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppleId");

                    b.Property<int>("MakerId");

                    b.HasKey("AppleMakerId");

                    b.HasIndex("AppleId");

                    b.HasIndex("MakerId");

                    b.ToTable("AppleMaker");
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleStyle", b =>
                {
                    b.Property<int>("AppleStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppleId");

                    b.Property<int>("StyleId");

                    b.HasKey("AppleStyleId");

                    b.HasIndex("AppleId");

                    b.HasIndex("StyleId");

                    b.ToTable("AppleStyle");
                });

            modelBuilder.Entity("CideryOrganizer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CideryOrganizer.Models.Cider", b =>
                {
                    b.Property<int>("CiderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CiderName");

                    b.Property<string>("UserId");

                    b.HasKey("CiderId");

                    b.HasIndex("UserId");

                    b.ToTable("Ciders");
                });

            modelBuilder.Entity("CideryOrganizer.Models.CiderMaker", b =>
                {
                    b.Property<int>("CiderMakerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CiderId");

                    b.Property<int>("MakerId");

                    b.HasKey("CiderMakerId");

                    b.HasIndex("CiderId");

                    b.HasIndex("MakerId");

                    b.ToTable("CiderMaker");
                });

            modelBuilder.Entity("CideryOrganizer.Models.CiderStyle", b =>
                {
                    b.Property<int>("CiderStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CiderId");

                    b.Property<int>("StyleId");

                    b.HasKey("CiderStyleId");

                    b.HasIndex("CiderId");

                    b.HasIndex("StyleId");

                    b.ToTable("CiderStyle");
                });

            modelBuilder.Entity("CideryOrganizer.Models.Maker", b =>
                {
                    b.Property<int>("MakerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MakerName");

                    b.Property<string>("UserId");

                    b.HasKey("MakerId");

                    b.HasIndex("UserId");

                    b.ToTable("Makers");
                });

            modelBuilder.Entity("CideryOrganizer.Models.MakerStyle", b =>
                {
                    b.Property<int>("MakerStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MakerId");

                    b.Property<int>("StyleId");

                    b.HasKey("MakerStyleId");

                    b.HasIndex("MakerId");

                    b.HasIndex("StyleId");

                    b.ToTable("MakerStyle");
                });

            modelBuilder.Entity("CideryOrganizer.Models.Style", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StyleName");

                    b.Property<string>("UserId");

                    b.HasKey("StyleId");

                    b.HasIndex("UserId");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CideryOrganizer.Models.Apple", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleCider", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Apple", "Apple")
                        .WithMany("Ciders")
                        .HasForeignKey("AppleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Cider", "Cider")
                        .WithMany("Apples")
                        .HasForeignKey("CiderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleMaker", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Apple", "Apple")
                        .WithMany("Makers")
                        .HasForeignKey("AppleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Maker", "Maker")
                        .WithMany("Apples")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.AppleStyle", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Apple", "Apple")
                        .WithMany("Styles")
                        .HasForeignKey("AppleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Style", "Style")
                        .WithMany("Apples")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.Cider", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CideryOrganizer.Models.CiderMaker", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Cider", "Cider")
                        .WithMany("Makers")
                        .HasForeignKey("CiderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Maker", "Maker")
                        .WithMany("Ciders")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.CiderStyle", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Cider", "Cider")
                        .WithMany("Styles")
                        .HasForeignKey("CiderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Style", "Style")
                        .WithMany("Ciders")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.Maker", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CideryOrganizer.Models.MakerStyle", b =>
                {
                    b.HasOne("CideryOrganizer.Models.Maker", "Maker")
                        .WithMany("Styles")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.Style", "Style")
                        .WithMany("Makers")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CideryOrganizer.Models.Style", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CideryOrganizer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CideryOrganizer.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
